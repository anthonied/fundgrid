@model FunGrid.Domain.Project
<script src="~/Scripts/knockout-2.2.1.js"></script>
<script src="~/Scripts/jquery-1.9.1.js"></script>



@{
    ViewBag.Title = "Details";
}

    <h1 style="background-color:#99FFFF;">DONATIONS:</h1>
    

    <fieldset>
        <legend>Project: @Html.DisplayFor(model => model.Name)</legend>
        <legend>Description: @Html.DisplayFor(model => model.Description)</legend>
                
        @if (Model.Grid == null)
        {
            
            <p>Sorry, a grid has not yet been created for the current selected project.</p>
            <p>Please return at a later time.</p>
        }
    
        @if (Model.Grid != null)
        {
         <p>Owner Name:</p>
        <input id="ownerInputTextbox" size="16" type="text"/>

        <table id="displayTabel2" border="0" class="grid" >

              <tbody data-bind="foreach: gridItemsRows">
                  
                  <tr data-bind="foreach: gridItemColumns">
                      <td>
                        <input type="button" style="width:100%" data-bind="disable: isdisabled, value:  price, click: BuyGridItem, selectedGridItem:this, data: $data, style: {color: isdisabled == true ? 'lightgrey' : 'black' }" />
                     </td>
                  </tr>
              </tbody>
          </table>
            
            @*<input type="button" value="Archive List" data-bind="click: Archive" />
            <input type="button" value="Delete" data-bind="click: DeleteGrid" />*@
        }
        
        
        <p>@Html.ActionLink("Back to List", "Donate")</p>
    </fieldset>
    

<script>

    var viewModel = @(Html.Raw(Json.Encode(Model)))



    GridItemViewModel = function () {
        var self = this;
        self.Id = ko.observable();
        self.Number = ko.observable();
        self.Owner = ko.observable();
        self.Amount = ko.observable();
        self.IsAvailable = ko.observable();
    };


    GridViewModel = function () {
        var self = this;
        self.row = ko.observable(0);
        self.column = ko.observable(0);
        self.gridvalue = ko.observable(0);
        self.gridincrementalvalue = ko.observable(0);

        if (viewModel.Grid != null)
        {
            self.gridItemsRows = ko.observableArray();
            for (var i = 0; i < viewModel.Grid.DimensionRows; i++)
            {
                var gridItemColumns = ko.observableArray();
                for (var j = 0; j < viewModel.Grid.DimensionColumns; j++)
                {
                    gridItemColumns.push({ price: viewModel.Grid.FullGridItems[i][j].Amount, count: viewModel.Grid.FullGridItems[i][j].Number, isdisabled: !viewModel.Grid.FullGridItems[i][j].IsAvailible });
                }
                self.gridItemsRows.push({ gridItemColumns: gridItemColumns });
            }
        }

        DoStuff = function (selectedGridItem) {
            alert("count: " + selectedGridItem.count + " price: " + selectedGridItem.price);
        }

        //CreateGrid = function () {
        //    $.post("/Project/CreateGrid/", { projectId: viewModel.Id, gridDimensionRows: GridRows.value, gridDimensionColumns: GridColumns.value, gridValue: GridItemAmount.value, incrementValue: GridItemIncrementalValue.value }, function () { location.reload() });
        //}

        BuyGridItem = function (selectedGridItem) {
            $.post("/Project/AddGridItem/", { gridId: viewModel.Grid.Id, gridItemNumber: selectedGridItem.count, gridItemOwner: ownerInputTextbox.value, gridItemAmount: selectedGridItem.price }, function () { location.reload(true) });
            ownerInputTextbox.value = "";
        }

        //DeleteGrid = function () {
        //    $.post("/Project/DeleteGrid/", { gridId: viewModel.Grid.Id });
        //    ReloadThePage();
        //}

        //Archive = function () {
        //    $.post("/Project/ArchiveGrid/", { gridId: viewModel.Grid.Id });
        //    ReloadThePage();
        //}

        ReloadThePage = function () {
            document.location.reload();
        }
    };

    ko.applyBindings(new GridViewModel());

</script>