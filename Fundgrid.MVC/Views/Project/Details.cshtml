@model Fundgrid.MVC.Models.DetailsModel

@{
    ViewBag.Title = "Details";
}

    <h1 style="background-color:#00FFCC;">ACTIVE:</h1>
    

    <fieldset>
        <p><font size="6">@Html.DisplayFor(model => model.Project.Name)</font></p>
        <p><font size="5">@Html.DisplayFor(model => model.Project.Description)</font></p>
                
        @if (Model.Project.Grid == null)
        {
            <table>
            <tr>
                <th>Rows</th>
                <td><input id="GridRows" type="text" data-bind="value: row"></td>
            </tr>

            <tr>
                <th>Columns</th>
                <td><input id="GridColumns" type="text" data-bind="value: column"></td>
            </tr> 

            <tr>
                <th>Amount</th>
                <td><input id="GridItemAmount" type="text" data-bind="value: gridvalue"></td>
            </tr>

            <tr>
                <th>Incremental Value</th>
                <td><input id="GridItemIncrementalValue" type="text" data-bind="value: gridincrementalvalue"></td>
            </tr>

            <tr>
                <th>Grid Name</th>
                <td><input id="GridName" type="text" data-bind="value: gridname"></td>
            </tr>

            <tr>
                <th>Grid Discription</th>
                <td><input id="GridDescription" type="text" data-bind="value: griddescription"></td>
            </tr>

            <tr>
                <td></td>
                <td><input type="button" value="Create Grid" data-bind="click: CreateGrid" /></td>
            </tr> 
            </table>
        }
    
        @if (Model.Project.Grid != null)
        {
            <div>
         <p><font size="2"><i>Grid Name : @Html.DisplayFor(model => model.Project.Grid.Name) </i></font></p>
        <p><font size="2"><i>Grid Description : @Html.DisplayFor(model => model.Project.Grid.Description)</i></font></p>   
                </div>
            
        <table id="displayTabel2" border="0" class="grid" >

              <tbody data-bind="foreach: gridItemsRows">
                  
                  <tr data-bind="foreach: gridItemColumns">
                      <td>
                        <input type="button" style="width:100%" data-bind="disable: isdisabled, value:  price, click: ViewDetails, selectedGridItem:this, data: $data, style: {color: isdisabled == true ? 'lightgrey' : 'black' }" />
                     </td>
                  </tr>
              </tbody>
          </table>
            
            <input type="button" value="Delete" data-bind="click: DeleteGrid" />
        }
        
        
        <p>@Html.ActionLink("Back to List", "Index")</p>
    </fieldset>
    
@section scripts {
<script>

    var viewModel = @(Html.Raw(Json.Encode(Model)))



    GridItemViewModel = function () {
        var self = this;
        self.Id = ko.observable();
        self.Number = ko.observable();
        self.Owner = ko.observable();
        self.Amount = ko.observable();
        self.IsAvailable = ko.observable();
    };


    GridViewModel = function () {
        var self = this;
        self.row = ko.observable(0);
        self.column = ko.observable(0);
        self.gridvalue = ko.observable(0);
        self.gridincrementalvalue = ko.observable(0);
        self.gridname = ko.observable("");
        self.griddescription = ko.observable("");

        if (viewModel.Project.Grid != null)
        {
            self.gridItemsRows = ko.observableArray();
            for (var i = 0; i < viewModel.Project.Grid.DimensionRows; i++)
            {
                var gridItemColumns = ko.observableArray();
                for (var j = 0; j < viewModel.Project.Grid.DimensionColumns; j++)
                {
                    gridItemColumns.push({ price: viewModel.Project.Grid.FullGridItems[i][j].Amount, count: viewModel.Project.Grid.FullGridItems[i][j].Number, owner: viewModel.Project.Grid.FullGridItems[i][j].Owner, isdisabled: viewModel.Project.Grid.FullGridItems[i][j].IsAvailible });
                }
                self.gridItemsRows.push({ gridItemColumns: gridItemColumns });
            }
        }

        DoStuff = function (selectedGridItem) {
            alert("count: " + selectedGridItem.count + " price: " + selectedGridItem.price);
        }

        CreateGrid = function () {
            $.post("/Project/CreateGrid/", { projectId: viewModel.Project.Id, gridDimensionRows: GridRows.value, gridDimensionColumns: GridColumns.value, gridValue: GridItemAmount.value, incrementValue: GridItemIncrementalValue.value, gridName: GridName.value, gridDescription: GridDescription.value }, function () { document.location.reload(true) });
        }

        DeleteGrid = function () {
            $.post("/Project/DeleteGrid/", { gridId: viewModel.Project.Grid.Id }, function () { document.location.reload(true) });
            //ReloadThePage();
        }

        Archive = function () {
            $.post("/Project/ArchiveGrid/", { gridId: viewModel.Project.Grid.Id }, function () { document.location.reload(true) });
            //ReloadThePage();
        }

        ViewDetails = function (data) {
            alert(data.owner + " bought item " + data.count + " at R" + data.price);
        }

        ReloadThePage = function () {
            document.location.reload(true);
        }
    };

    ko.applyBindings(new GridViewModel(), document.getElementById("bodyDiv"));


	    $(document).ready(function ()
	    {
	        busyViewModel.IsBusy(false);
	    });
	</script>
}