@model Fundgrid.MVC.Models.DetailsModel

@{
    ViewBag.Title = "Details";
}

<div class="page-header">
        <h1 style="font-size:70px;font-family:'Century Gothic'">GRID DETAILS</h1>
</div> 

<div>
    <div>
        <div class="page-header" >
            <br />
            <h2 style="font-size: 40px" data-bind="text: projectName"></h2>
            <h3 style="font-size: 25px" data-bind="text: projectDescription"></h3><br />
        </div>
                
        @if (Model.Project.Grid == null)
        {
            <table>
                <tr>
                    <th>Rows</th>
                    <td><input id="GridRows" type="text" data-bind="value: row"></td>
                </tr>

                <tr>
                    <th>Columns</th>
                    <td><input id="GridColumns" type="text" data-bind="value: column"></td>
                </tr> 

                <tr>
                    <th>Amount</th>
                    <td><input id="GridItemAmount" type="text" data-bind="value: gridvalue"></td>
                </tr>

                <tr>
                    <th>Incremental Value</th>
                    <td><input id="GridItemIncrementalValue" type="text" data-bind="value: gridincrementalvalue"></td>
                </tr>

                <tr>
                    <th>Grid Name</th>
                    <td><input id="GridName" type="text" data-bind="value: gridname"></td>
                </tr>

                <tr>
                    <th>Grid Discription</th>
                    <td><input id="GridDescription" type="text" data-bind="value: griddescription"></td>
                </tr>

                <tr>
                    <td></td>
                    <td><input type="button" class="btn btn-success" value="Create Grid" data-bind="click: CreateGrid" /></td>
                </tr> 
            </table>
        }
    
        @if (Model.Project.Grid != null)
        {
            <div class="page-header">
                <p style="font-size: 20px;"><strong>You are currently viewing: </strong><span style="font-style:italic" data-bind="text: gridtName"></span></p>
                <p style="font-size: 20px; font-style:italic"><span data-bind="text: gridDescription"></span></p><br />
            </div>
            
            <table id="displayTabel2" border="0" class="grid" >
                    <tbody data-bind="foreach: gridItemsRows">
                  
                        <tr data-bind="foreach: gridItemColumns">
                            <td>
                            <input type="button" style="width:100%;font-family:'Century Gothic'" data-bind="disable: isdisabled, value: price, click: ViewDetails, selectedGridItem: this, data: $data, style: { color: isdisabled == true ? 'lightgrey' : 'black' }, css: type" />
                            </td>
                        </tr>
                    </tbody>
                </table><br />
            
            <input type="button" value="Delete grid" class="btn btn-danger" data-bind="click: DeleteGrid" />
        }
    </div><br />
    <div>
        <a href="#" class="btn btn-info" data-bind="click: BackToTheList">< Back my projects</a>
    </div>
</div>

<div class="modal hide fade" id="purchaseModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="vertical-align:middle">
    <div class="modal-header">
        <h3>Donation on item: <span data-bind="text: gridItemNumber"></span></h3>
    </div>
    <div class="modal-body">
        <div>
            <p><strong>Owner: </strong><span data-bind="text: gridItemOwner"></span></p>
            <p><strong>Value: </strong>R<span data-bind="text: gridItemPrice"></span></p>
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn btn-success" data-dismiss="modal" aria-hidden="true">Ok</button>
    </div>
</div>
    
@section scripts {
<script>

    var viewModel = @(Html.Raw(Json.Encode(Model)))
    projectName = ko.observable(viewModel.Project.Name);
    projectDescription = ko.observable(viewModel.Project.Description);
    gridtName = ko.observable();
    gridDescription = ko.observable();

    gridItemOwner = ko.observable("");
    gridItemNumber = ko.observable("");
    gridItemPrice = ko.observable("");

    if (viewModel.Project.Grid)
    {
        gridtName(viewModel.Project.Grid.Name);
        gridDescription(viewModel.Project.Grid.Description);
    }

    GridItemViewModel = function () {
        var self = this;
        self.Id = ko.observable();
        self.Number = ko.observable();
        self.Owner = ko.observable();
        self.Amount = ko.observable();
        self.IsAvailable = ko.observable();
    };


    GridViewModel = function () {
        var self = this;
        self.row = ko.observable(0);
        self.column = ko.observable(0);
        self.gridvalue = ko.observable(0);
        self.gridincrementalvalue = ko.observable(0);
        self.gridname = ko.observable("");
        self.griddescription = ko.observable("");


        if (viewModel.Project.Grid != null)
        {
            var btnType = "btn";
            self.gridItemsRows = ko.observableArray();
            for (var i = 0; i < viewModel.Project.Grid.DimensionRows; i++)
            {
                var gridItemColumns = ko.observableArray();
                for (var j = 0; j < viewModel.Project.Grid.DimensionColumns; j++)
                {
                    if (!viewModel.Project.Grid.FullGridItems[i][j].IsAvailible)
                        btnType = "btn btn-success";
                    else
                        btnType = "btn";
                    gridItemColumns.push({ price: viewModel.Project.Grid.FullGridItems[i][j].Amount, count: viewModel.Project.Grid.FullGridItems[i][j].Number, owner: viewModel.Project.Grid.FullGridItems[i][j].Owner, isdisabled: viewModel.Project.Grid.FullGridItems[i][j].IsAvailible, type: btnType });
                }
                self.gridItemsRows.push({ gridItemColumns: gridItemColumns() });
            }
        }

        BackToTheList = function () {
            changeLocation("/Project/Index/");
        }

        CreateGrid = function () {
            $.post("/Project/CreateGrid/", { projectId: viewModel.Project.Id, gridDimensionRows: GridRows.value, gridDimensionColumns: GridColumns.value, gridValue: GridItemAmount.value, incrementValue: GridItemIncrementalValue.value, gridName: GridName.value, gridDescription: GridDescription.value }, function () { document.location.reload(true) });
        }

        DeleteGrid = function () {
            $.post("/Project/DeleteGrid/", { gridId: viewModel.Project.Grid.Id }, function () { document.location.reload(true) });
            //ReloadThePage();
        }

        Archive = function () {
            $.post("/Project/ArchiveGrid/", { gridId: viewModel.Project.Grid.Id }, function () { document.location.reload(true) });
            //ReloadThePage();
        }

        ViewDetails = function (data) {
            gridItemOwner(data.owner);
            gridItemNumber(data.count);
            gridItemPrice(data.price);
            $('#purchaseModel').modal({ backdrop: 'static', show: true });
        }

        ReloadThePage = function () {
            document.location.reload(true);
        }
    };

    ko.applyBindings(new GridViewModel(), document.getElementById("bodyDiv"));


	    $(document).ready(function ()
	    {
	        busyViewModel.IsBusy(false);
	    });
</script>
}