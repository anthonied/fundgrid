@model FunGrid.Domain.Project
<script src="~/Scripts/knockout-2.2.1.js"></script>
<script src="~/Scripts/jquery-1.9.1.js"></script>



@{
    ViewBag.Title = "Details";
}

    <h1>@Html.DisplayFor(model => model.Name)</h1>

    <fieldset>
        <legend>Description: @Html.DisplayFor(model => model.Description)</legend>
                
        @if (Model.Grid == null)
        {
            <table>
            <tr>
                <th>Rows</th>
                <td><input id="GridRows" type="text" data-bind="value: row"></td>
            </tr>
            <tr>
                <th>Columns</th>
                <td><input id="GridColumns" type="text" data-bind="value: column"></td>
            </tr> 
            <tr>
                <th>Amount</th>
                <td><input id="GridItemAmount" type="text" data-bind="value: gridvalue"></td>
            </tr> 
            <tr>
                <td></td>
                <td><input type="button" value="Create Grid" data-bind="click: CreateGrid" /></td>
            </tr> 
            </table>
        }

        @if (Model.Grid != null)
        {
         <p>Owner Name:</p>
        <input id="ownerInputTextbox" size="16" type="text"/>

        <table id="displayTabel" border="1" class="table">
              <thead>
                  <tr>
                    <th>Owner</th>
                    <th>Amount</th>
                    <th>Buy</th>
                  </tr>
              </thead>
              <tbody data-bind="foreach: gridItems">
                  <tr>                    
                    <td id="tableOwnerNumber" data-bind="text: Number, visible: false"></td>
                    <td data-bind="text: Owner"></td>
                    <td data-bind="text: Amount"></td>
                    <td><input id="buyButton" type="button" value="Buy" data-bind="visible: IsAvailable == true, click: BuyGridItem, index: Number, index: Amount"/></td>
                  </tr>
              </tbody>
          </table>
        }
        <input type="button" value="Delete" data-bind="click: DeleteGrid" />
        <p>@Html.ActionLink("Back to List", "Index")</p>
    </fieldset>
    

<script>
    
    var viewModel = @(Html.Raw(Json.Encode(Model)))
    
    GridItemViewModel = function()
    {
        var self = this;
        self.Id = ko.observable();
        self.Number = ko.observable();
        self.Owner = ko.observable();
        self.Amount = ko.observable();
        self.IsAvailable = ko.observable();
    };
    
    
    GridViewModel = function ()
    {
        var self = this;
        self.row = ko.observable(0);
        self.column = ko.observable(0);
        self.gridItems = ko.observableArray();
        self.gridvalue = ko.observable();

        if(viewModel.Grid != null)
        {
            var itemCount = viewModel.Grid.DimensionRows * viewModel.Grid.DimensionColumns;
            var gia = viewModel.Grid.GridItemValue;

            for(var i = 0; i < itemCount; i++)
            {
                var model = new GridItemViewModel();
                model.Number = i + 1;
                model.IsAvailable = true;
                
                model.Amount = viewModel.Grid.GridItemValue;
                for(var j = 0; j < viewModel.Grid.GridItems.length; j++)
                {
                    if(model.Number == viewModel.Grid.GridItems[j].Number)
                    {
                        model.Owner = viewModel.Grid.GridItems[j].Owner;
                        model.Amount = viewModel.Grid.GridItems[j].Amount;
                        model.IsAvailable = viewModel.Grid.GridItems[j].IsAvailable;
                    }
                };
                this.gridItems.push(model);
            }; 
        }
        
        CreateGrid = function ()
        {
            $.post("/Project/CreateGrid/", { projectId: viewModel.Id, gridDimensionRows: GridRows.value, gridDimensionColumns: GridColumns.value, gridValue: GridItemAmount.value }, function() {location.reload()});
        }

        BuyGridItem = function()
        {
            $.post("/Project/AddGridItem/", { gridId: viewModel.Grid.Id, gridItemNumber: this.Number , gridItemOwner: ownerInputTextbox.value, gridItemAmount: this.Amount}, function() {location.reload()});
        }

        DeleteGrid = function()
        {
            $.post("/Project/DeleteGrid/", { gridId: viewModel.Grid.Id },window.location.reload());
            
        }
    };
    
    var models = 
        {
            m1: new GridViewModel(),
            m2: new GridItemViewModel()
        };
    ko.applyBindings(models.m1);
    ko.applyBindings(models.m2);

</script>